<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Andre Huang</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-20T15:56:05.804Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Andre Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>（补充）重绘和重排</title>
    <link href="http://yoursite.com/2016/08/20/repaint-reflow-addition/"/>
    <id>http://yoursite.com/2016/08/20/repaint-reflow-addition/</id>
    <published>2016-08-20T15:22:23.000Z</published>
    <updated>2016-08-20T15:56:05.804Z</updated>
    
    <content type="html">&lt;h1 id=&quot;触发重排的操作&quot;&gt;&lt;a href=&quot;#触发重排的操作&quot; class=&quot;headerlink&quot; title=&quot;触发重排的操作&quot;&gt;&lt;/a&gt;触发重排的操作&lt;/h1&gt;&lt;h2 id=&quot;1-DOM-元素的几何属性变化&quot;&gt;&lt;a href=&quot;#1-DOM-元素的几何属性变化&quot; class=&quot;headerlink&quot; title=&quot;1. DOM 元素的几何属性变化&quot;&gt;&lt;/a&gt;1. DOM 元素的几何属性变化&lt;/h2&gt;&lt;p&gt;当DOM元素的几何属性变化时，渲染树中的相关节点就会失效，浏览器会根据DOM元素的变化重建构建渲染树中失效的节点。之后，会根据新的渲染树重新绘制这部分页面。而且，当前元素的重排也许会带来相关元素的重排。例如，容器节点的渲染树改变时，会触发子节点的重新计算，也会触发其后续兄弟节点的重排，祖先节点需要重新计算子节点的尺寸也会产生重排。最后，每个元素都将发生重绘。可见，重排一定会引起浏览器的重绘，一个元素的重排通常会带来一系列的反应，甚至触发整个文档的重排和重绘，性能代价是高昂的。&lt;/p&gt;
&lt;h2 id=&quot;2-DOM-树的结构变化&quot;&gt;&lt;a href=&quot;#2-DOM-树的结构变化&quot; class=&quot;headerlink&quot; title=&quot;2. DOM 树的结构变化&quot;&gt;&lt;/a&gt;2. DOM 树的结构变化&lt;/h2&gt;&lt;p&gt;当DOM树的++结构变化++时，例如&lt;strong&gt;节点的增减、移动&lt;/strong&gt;等，也会触发重排。浏览器引擎布局的过程，类似于树的前序遍历，是一个从上到下从左到右的过程。++通常在这个过程中，当前元素不会再影响其前面已经遍历过的元素++。所以，如果在body最前面插入一个元素，会导致整个文档的重新渲染，而在其后插入一个元素，则不会影响到前面的元素。&lt;/p&gt;
&lt;h2 id=&quot;3-获取某些属性&quot;&gt;&lt;a href=&quot;#3-获取某些属性&quot; class=&quot;headerlink&quot; title=&quot;3. 获取某些属性&quot;&gt;&lt;/a&gt;3. 获取某些属性&lt;/h2&gt;&lt;p&gt;浏览器引擎可能会针对重排做了优化。比如Opera，它会等到有足够数量的变化发生，或者等到一定的时间，或者等一个线程结束，再一起处理，这样就只发生一次重排。但除了渲染树的直接变化，当获取一些属性时，浏览器为取得正确的值也会触发重排。这样就使得浏览器的优化失效了。这些属性包括：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight、getComputedStyle() (currentStyle in IE)。所以，在多次使用这些值时应进行缓存。&lt;/p&gt;
&lt;h2 id=&quot;4-其他操作（如：调整浏览器窗口大小）&quot;&gt;&lt;a href=&quot;#4-其他操作（如：调整浏览器窗口大小）&quot; class=&quot;headerlink&quot; title=&quot;4. 其他操作（如：调整浏览器窗口大小）&quot;&gt;&lt;/a&gt;4. 其他操作（如：调整浏览器窗口大小）&lt;/h2&gt;&lt;h1 id=&quot;优化实践&quot;&gt;&lt;a href=&quot;#优化实践&quot; class=&quot;headerlink&quot; title=&quot;优化实践&quot;&gt;&lt;/a&gt;优化实践&lt;/h1&gt;&lt;h2 id=&quot;1-合并操作&quot;&gt;&lt;a href=&quot;#1-合并操作&quot; class=&quot;headerlink&quot; title=&quot;1. 合并操作&quot;&gt;&lt;/a&gt;1. 合并操作&lt;/h2&gt;&lt;p&gt;将多次改变属性的操作合并成一次，如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// JS:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var changeDiv = document.getElementById(‘changeDiv’);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;changeDiv.style.color = ‘#093′;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;changeDiv.style.background = ‘#eee&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;changeDiv.style.height = ‘200px&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 可以合并为：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// CSS:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;div.changeDiv &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;background: #eee;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;color: #093;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;height: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// JS:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;document.getElementById(‘changeDiv’).className = ‘changeDiv&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-脱离文档流&quot;&gt;&lt;a href=&quot;#2-脱离文档流&quot; class=&quot;headerlink&quot; title=&quot;2. 脱离文档流&quot;&gt;&lt;/a&gt;2. 脱离文档流&lt;/h2&gt;&lt;p&gt;将需要多次重排的元素，++position属性设为absolute或fixed++，这样此元素就脱离了文档流，它的变化不会影响到其他元素。&lt;/p&gt;
&lt;p&gt;例如&lt;strong&gt;有动画效果&lt;/strong&gt;的元素就最好设置为&lt;strong&gt;绝对定位&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;3-整体添加至文档&quot;&gt;&lt;a href=&quot;#3-整体添加至文档&quot; class=&quot;headerlink&quot; title=&quot;3. 整体添加至文档&quot;&gt;&lt;/a&gt;3. 整体添加至文档&lt;/h2&gt;&lt;p&gt;在内存中多次操作节点，完成后再添加到文档中去。例如要异步获取表格数据，渲染到页面。可以++先取得数据后在内存中构建整个表格的html片段，再一次性添加到文档中++去，而不是循环添加每一行。&lt;/p&gt;
&lt;h2 id=&quot;4-隐藏状态修改属性&quot;&gt;&lt;a href=&quot;#4-隐藏状态修改属性&quot; class=&quot;headerlink&quot; title=&quot;4. 隐藏状态修改属性&quot;&gt;&lt;/a&gt;4. 隐藏状态修改属性&lt;/h2&gt;&lt;p&gt;由于display属性为none的元素不在渲染树中，对隐藏的元素操作不会引发其他元素的重排。&lt;em&gt;如果要对一个元素进行复杂的操作时，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排&lt;/em&gt;。&lt;/p&gt;
&lt;h2 id=&quot;5-缓存&quot;&gt;&lt;a href=&quot;#5-缓存&quot; class=&quot;headerlink&quot; title=&quot;5. 缓存&quot;&gt;&lt;/a&gt;5. 缓存&lt;/h2&gt;&lt;p&gt;在需要经常取那些引起浏览器重排的属性值时，要缓存到变量&lt;/p&gt;
&lt;p&gt;(参考：&lt;a href=&quot;http://blog.jobbole.com/46722/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.jobbole.com/46722/&lt;/a&gt;)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;触发重排的操作&quot;&gt;&lt;a href=&quot;#触发重排的操作&quot; class=&quot;headerlink&quot; title=&quot;触发重排的操作&quot;&gt;&lt;/a&gt;触发重排的操作&lt;/h1&gt;&lt;h2 id=&quot;1-DOM-元素的几何属性变化&quot;&gt;&lt;a href=&quot;#1-DOM-元素的几何属性变化&quot; c
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS 的 controller.js 要不要拆分</title>
    <link href="http://yoursite.com/2016/04/20/whether-angularjs-controller-need-be-divided/"/>
    <id>http://yoursite.com/2016/04/20/whether-angularjs-controller-need-be-divided/</id>
    <published>2016-04-20T11:56:11.000Z</published>
    <updated>2016-04-20T15:22:10.570Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;（摘自知乎）&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;（摘自知乎）&lt;/strong&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="AngularJS" scheme="http://yoursite.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>使用 Express 框架来开发 Node.js 应用</title>
    <link href="http://yoursite.com/2016/04/10/learn-to-use-express/"/>
    <id>http://yoursite.com/2016/04/10/learn-to-use-express/</id>
    <published>2016-04-10T13:55:29.000Z</published>
    <updated>2016-04-21T09:39:45.771Z</updated>
    
    <content type="html">&lt;h1 id=&quot;前-che-言-dan&quot;&gt;&lt;a href=&quot;#前-che-言-dan&quot; class=&quot;headerlink&quot; title=&quot;前(che)言(dan)&quot;&gt;&lt;/a&gt;前(che)言(dan)&lt;/h1&gt;&lt;p&gt;由于毕业设计想尝试着使用 Node.js 来做一个应用，因此便接触了 Express 这个已有的 Web 开发框架。&lt;br&gt;有了 Express 这个框架，就可以省去自己手动实现小到一个 POST 请求，大到 Cookie、会话的管理的精力，避免了重复造轮子。&lt;/p&gt;
&lt;h1 id=&quot;Express-实现的功能&quot;&gt;&lt;a href=&quot;#Express-实现的功能&quot; class=&quot;headerlink&quot; title=&quot;Express 实现的功能&quot;&gt;&lt;/a&gt;Express 实现的功能&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;为 http 模块提供了更高层的接口，而不用直接使用 Node.js 的 http 模块提供的底层接口&lt;/li&gt;
&lt;li&gt;路由控制&lt;/li&gt;
&lt;li&gt;模版解析支持&lt;/li&gt;
&lt;li&gt;动态视图&lt;/li&gt;
&lt;li&gt;用户会话&lt;/li&gt;
&lt;li&gt;CSRF 保护&lt;/li&gt;
&lt;li&gt;静态文件服务&lt;/li&gt;
&lt;li&gt;错误控制器&lt;/li&gt;
&lt;li&gt;访问日志&lt;/li&gt;
&lt;li&gt;缓存&lt;/li&gt;
&lt;li&gt;插件支持&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Express-工程的结构&quot;&gt;&lt;a href=&quot;#Express-工程的结构&quot; class=&quot;headerlink&quot; title=&quot;Express 工程的结构&quot;&gt;&lt;/a&gt;Express 工程的结构&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;|—— bin/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|—— node_modules/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|—— public/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|	|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|	|—— images/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|	|—— javascripts/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|	|—— stylesheets/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|—— routes/				为指定路径组织返回内容，相当于 MVC 架构中的控制器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|	|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|	|—— index.js			路由文件，相当于控制器，用于组织展示的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|—— views/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|	|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|	|—— index.jade		模版文件，当前为 routes/index.js 中调用的模版&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|—— app.js				工程的入口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|—— package.json&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;各文件说明&quot;&gt;&lt;a href=&quot;#各文件说明&quot; class=&quot;headerlink&quot; title=&quot;各文件说明&quot;&gt;&lt;/a&gt;各文件说明&lt;/h1&gt;&lt;h2 id=&quot;app-js&quot;&gt;&lt;a href=&quot;#app-js&quot; class=&quot;headerlink&quot; title=&quot;app.js&quot;&gt;&lt;/a&gt;app.js&lt;/h2&gt;&lt;p&gt;app 对象一般情况下都是指向 Express 应用，通过调用 Express 模块的 express() 方法创建&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var express = require(&amp;apos;express&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var app = express();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;app 对象配有一些成员方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;app.METHOD 和 app.param，用来处理路由 HTTP 请求&lt;/li&gt;
&lt;li&gt;app.route，用来配置中间件&lt;/li&gt;
&lt;li&gt;app.render，渲染 HTML 视图&lt;/li&gt;
&lt;li&gt;app.engine，注册模版引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;app.set 是 Express 的参数设置工具，接受一个 key 和一个 value&lt;br&gt;可用的参数有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;basepath：基础地址，通常用于 res.redirect() 跳转&lt;/li&gt;
&lt;li&gt;views：视图文件的目录，存放模版文件&lt;/li&gt;
&lt;li&gt;view engine：视图模版引擎&lt;/li&gt;
&lt;li&gt;view cache：启用视图缓存&lt;/li&gt;
&lt;li&gt;case sensitive route：路径区分大小写&lt;/li&gt;
&lt;li&gt;strict routing：严格路径，启用后不会忽略路径末尾的“/”&lt;/li&gt;
&lt;li&gt;jsonp callback：开启透明的 JSONP 支持&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app.set(&amp;apos;title&amp;apos;,&amp;apos;My Site&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;app.get 可以获取 setting 里 key 对应的 value&lt;br&gt;eg： app.get(‘/‘,routes.index); 是一个路由控制器，用户如果访问“/”路径，则由 routes.index 来控制&lt;/p&gt;
&lt;p&gt;app.use 用来启用大量的中间件&lt;br&gt;（在 Express3.X 时依赖于 Connect）&lt;br&gt;（而在4.X开始，除了 Static 其余则被分离成独立的模块，需要单独安装，使用 require 调用）&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var morgan = require(&amp;apos;morgan&amp;apos;); //logger模块的这个新名字真是神奇&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var bodyParser = require(&amp;apos;body-parser&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var methodOverride = require(&amp;apos;method-override&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.use(express.static(__dirname + &amp;apos;/public&amp;apos;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.use(morgan(&amp;apos;dev&amp;apos;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.use(bodyParser());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.use(methodOverride());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前-che-言-dan&quot;&gt;&lt;a href=&quot;#前-che-言-dan&quot; class=&quot;headerlink&quot; title=&quot;前(che)言(dan)&quot;&gt;&lt;/a&gt;前(che)言(dan)&lt;/h1&gt;&lt;p&gt;由于毕业设计想尝试着使用 Node.js 来做一个应用，因此便接
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>在 hexo 新建一个不依赖模板配置的空白页面</title>
    <link href="http://yoursite.com/2016/03/31/create-a-blank-html-page/"/>
    <id>http://yoursite.com/2016/03/31/create-a-blank-html-page/</id>
    <published>2016-03-30T16:40:37.000Z</published>
    <updated>2016-03-30T16:48:47.050Z</updated>
    
    <content type="html">&lt;p&gt;hexo 有两个新建文件的命令，一个是 hexo new +文件名；另一个是 hexo new page +路径名&lt;/p&gt;
&lt;p&gt;通过第二种方式，我们可以在 source 里新建一个目录，不同一般的文章，而是有一个新的页面，供我们访问，如 localhost:4000/about&lt;/p&gt;
&lt;p&gt;但通过这种方法生成的页面 index.md，也会在 hexo g 的时候，被默认套用了配置模板。&lt;/p&gt;
&lt;p&gt;那有没有办法可以使这个页面不会依赖于模板呢？答案是有的。&lt;/p&gt;
&lt;p&gt;在 index.md 文件头加上这么一句，就可以解决： “&lt;strong&gt;layout: false&lt;/strong&gt;“&lt;/p&gt;
&lt;p&gt;如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;layout: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;title: &amp;quot;this is a title&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;date: 2016-03-31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;p&amp;gt;hello world&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样就大功告成了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;hexo 有两个新建文件的命令，一个是 hexo new +文件名；另一个是 hexo new page +路径名&lt;/p&gt;
&lt;p&gt;通过第二种方式，我们可以在 source 里新建一个目录，不同一般的文章，而是有一个新的页面，供我们访问，如 localhost:4000/ab
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS 的数据绑定</title>
    <link href="http://yoursite.com/2016/03/30/ng-bind-and-double-braces/"/>
    <id>http://yoursite.com/2016/03/30/ng-bind-and-double-braces/</id>
    <published>2016-03-29T16:29:43.000Z</published>
    <updated>2016-03-29T16:40:06.096Z</updated>
    
    <content type="html">&lt;p&gt;使用 AngularJS，最重要的特点之一，就是它的数据绑定了。&lt;/p&gt;
&lt;h1 id=&quot;共性&quot;&gt;&lt;a href=&quot;#共性&quot; class=&quot;headerlink&quot; title=&quot;共性&quot;&gt;&lt;/a&gt;共性&lt;/h1&gt;&lt;p&gt;在 AJS 中，经常需要将给定的变量或者表达式，来添加在某个 html 元素内，这个时候经常用到的就是 ng-bind 和双括号（hexo不允许使用半角的花括号，因此只能用中文或者是全角符号了）了，如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div ng-init=&amp;quot;str=&amp;apos;hello&amp;apos;&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;p ng-bind=&amp;quot;str&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;p&amp;gt;｛｛str｝｝&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在这个例子中，两个 p 元素都能在浏览器上显示 str 的内容。这也就是数据绑定的实现。&lt;/p&gt;
&lt;h1 id=&quot;个性&quot;&gt;&lt;a href=&quot;#个性&quot; class=&quot;headerlink&quot; title=&quot;个性&quot;&gt;&lt;/a&gt;个性&lt;/h1&gt;&lt;p&gt;尽管 ng-bind 和双括号的作用是一致的，但是两者仍然有一些区别。在两者之中，也更推荐使用 ng-bind。&lt;/p&gt;
&lt;h2 id=&quot;可见性&quot;&gt;&lt;a href=&quot;#可见性&quot; class=&quot;headerlink&quot; title=&quot;可见性&quot;&gt;&lt;/a&gt;可见性&lt;/h2&gt;&lt;p&gt;所谓的“可见性”，就是指，在打开页面时，页面内会展现出 AJS 的变量或者表达式。&lt;br&gt;这是因为&lt;strong&gt;此时 HTML 内容已经加载完成，但 Angular 脚本尚未加载完成，因此还没有替换掉 HTML 中的双括号注释&lt;/strong&gt;。&lt;br&gt;事实上这个也是我在刚开始学习开发 Angular App 时遇到的问题。&lt;br&gt;这个问题可以通过使用 ng-bind 来解决，这也是利用了 ng-bind 和双括号在可见性的区别。&lt;br&gt;使用双括号时，HTML 加载时，会将这个注释视为字符串，直接打印出来；而使用 ng-bind 的时候，因为 ng-bind 是作为 HTML 元素的属性，因此对于用户是不可见的，因此不会将变量或者表达式暴露出来。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 使用 ng-bind&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div ng-bind=&amp;quot;str&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 而不用 ｛｛｝｝&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div&amp;gt;｛｛str｝｝&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;p.s. 对于这个现象，还有另外一个解决方案，就是使用 ng-cloak，配合 css 的属性选择器，在 Angular 脚本加载完成前，将带有 ng-cloak 指令的节点隐藏掉，即：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[ng:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	display: none !important;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是这个方法美中不足的在于，angular 加载完成之前，添加了这个指令的元素会处于空白状态，特别的，加在 body 时，会出现白屏状态。&lt;/p&gt;
&lt;h2 id=&quot;性能&quot;&gt;&lt;a href=&quot;#性能&quot; class=&quot;headerlink&quot; title=&quot;性能&quot;&gt;&lt;/a&gt;性能&lt;/h2&gt;&lt;p&gt;并不是只因为使用双括号会暴露表达式就推荐使用 ng-bind 的。更重要的是两者在性能方面上的差异。&lt;br&gt;事实上，使用双括号，速度相对较慢。（这里是指数据较多的情况，下同）&lt;br&gt;造成性能差异的原因是：&lt;br&gt;    首先对于双括号来说，angular 会在每次 $digest 循环时对花括号内的变量进行检查，并且将变量的值重新输出到 HTML 中；&lt;br&gt;    而对于 ng-bind 这个指令来说，它会被放置一个 watcher 监听器，只有当监听器监听到它绑定的变量的值发生变化时，ng-bind 才会应用，更新绑定变量的值&lt;/p&gt;
&lt;p&gt;引用 stackoverflow 里一位叫 Konstantin Krass 的朋友的尝试：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am currently building a big single page app (~500 bindings per view). Changing from ｛｛｝｝ to strict ng-bind did save us about 20% in every scope.$digest.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;使用 AngularJS，最重要的特点之一，就是它的数据绑定了。&lt;/p&gt;
&lt;h1 id=&quot;共性&quot;&gt;&lt;a href=&quot;#共性&quot; class=&quot;headerlink&quot; title=&quot;共性&quot;&gt;&lt;/a&gt;共性&lt;/h1&gt;&lt;p&gt;在 AJS 中，经常需要将给定的变量或者表达式，来添加在某个
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="AngularJS" scheme="http://yoursite.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>去掉 IE 浏览器在 input 下自带的叉号和小眼睛</title>
    <link href="http://yoursite.com/2016/03/27/hide-special-function-in-IE/"/>
    <id>http://yoursite.com/2016/03/27/hide-special-function-in-IE/</id>
    <published>2016-03-27T01:44:22.000Z</published>
    <updated>2016-03-27T02:01:09.545Z</updated>
    
    <content type="html">&lt;p&gt;在 Edge 浏览器下，对于 input[type=”text”] 来说，当在输入框里输入内容时，输入框右边会出现一个“×”号，点击之后可以清除掉该 input 里的所有内容。这个按钮有时对用户来说是比较方便的。但有时，我们可能不需要这个按钮，或者是我们需要自己定制一个符合指定样式和功能的按钮，因此这时候就需要将浏览器自带的隐藏掉&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 这个样式只是针对 IE 浏览器下 type=&amp;quot;text&amp;quot; 的 input&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input[type=&amp;quot;text&amp;quot;]::-ms-clear &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	display: none&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 也可以指定所有 input&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input::-ms-clear &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	display: none&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样，有时候并不需要使用到 input[type=”password”] 的小眼睛（通过点击可以看到密码的内容），因此隐藏的方法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 这个样式只是针对 IE 浏览器下 type=&amp;quot;text&amp;quot; 的 input&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input[type=&amp;quot;password&amp;quot;]::-ms-reveal &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	display: none&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;在 Edge 浏览器下，对于 input[type=”text”] 来说，当在输入框里输入内容时，输入框右边会出现一个“×”号，点击之后可以清除掉该 input 里的所有内容。这个按钮有时对用户来说是比较方便的。但有时，我们可能不需要这个按钮，或者是我们需要自己定制一个符合
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>XMLHttpRequest 对象以及 AJAX 技术</title>
    <link href="http://yoursite.com/2016/03/16/XHR-AJAX/"/>
    <id>http://yoursite.com/2016/03/16/XHR-AJAX/</id>
    <published>2016-03-15T17:13:24.000Z</published>
    <updated>2016-03-27T02:04:33.188Z</updated>
    
    <content type="html">&lt;h1 id=&quot;XMLHttpRequest-对象&quot;&gt;&lt;a href=&quot;#XMLHttpRequest-对象&quot; class=&quot;headerlink&quot; title=&quot;XMLHttpRequest 对象&quot;&gt;&lt;/a&gt;XMLHttpRequest 对象&lt;/h1&gt;&lt;p&gt;AJAX技术的核心。&lt;/p&gt;
&lt;p&gt;是通过 MSXML 库中的一个 ActiveX 对象实现。&lt;/p&gt;
&lt;p&gt;在 IE 中可能会遇到三种不同版本的 XHR 对象： MSXML2.XMLHttp、MSXML2.XMLHttp.3.0 和 MSXML2.XMLHttp.6.0&lt;/p&gt;
&lt;p&gt;创建 XHR 对象的方法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function createXHR() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (typeof XMLHttpRequest != &amp;quot;undefined&amp;quot;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 首先检测原生 XHR 对象是否存在，如果存在则返回它的新实例。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return new XMLHttpRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; else if (typeof ActiveXObject != &amp;quot;undefined&amp;quot;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 如果原生对象不存在，则检测 ActiveX 对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (typeof arguments.callee.activeXString != &amp;quot;string&amp;quot;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			var version = [ &amp;quot;MSXML2.XMLHttp.6.0&amp;quot;, &amp;quot;MSXML2.XMLHttp.3.0&amp;quot;, &amp;quot;MSXML2.XMLHttp&amp;quot; ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			i, len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			for (i = 0, len=version.length; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					new ActiveXObject(version[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					arguments.callee.activeXString = version[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125; catch (ex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					// 跳过&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return new ActiveXObject(arguments.callee.activeXString);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 如果两种对象都不存在，就抛出错误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		throw new Error(&amp;quot;No XHR object available.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于其他浏览器中对 XHR 的实现与 IE 最早的实现是兼容的，所以可以在所有的浏览器中以相同方式使用上面创建的 xhr 对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;XHR-的用法&quot;&gt;&lt;a href=&quot;#XHR-的用法&quot; class=&quot;headerlink&quot; title=&quot;XHR 的用法&quot;&gt;&lt;/a&gt;XHR 的用法&lt;/h2&gt;&lt;p&gt;&lt;strong&gt; open() &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接受 3 个参数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要发送的请求的类型（”get”、”post” 等）&lt;/li&gt;
&lt;li&gt;请求的URL&lt;/li&gt;
&lt;li&gt;表示是否异步发送请求的布尔值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;p.s.&lt;br&gt;1、URL 可以是相对地址（一般推荐），也可以是绝对路径&lt;/p&gt;
&lt;p&gt;2、调用 open()方法只是启动一个请求以备发送，并没有真正发送出去&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只能向同一个域中使用相同端口和协议的 URL 发送请求。&lt;br&gt;如果 URL 与启动请求的页面有任何差别，都会引发安全错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt; send() &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在使用 open() 方法启动请求之后，可以调用 send() 方法&lt;/p&gt;
&lt;p&gt;接受一个参数： 作为请求主体发送的数据（不需要的话则必须传入 null，因为对于部分浏览器来说是该参数是必须的）&lt;/p&gt;
&lt;p&gt;服务器响应后，JS 代码继续执行，并且响应的数据会自动填充 XHR 对象的属性。相关属性如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;responseText：作为响应主体被返回的文本&lt;/li&gt;
&lt;li&gt;responseXML：如果响应的内容是”text/xml”或”application/xml”，这个属性中将保存包含着响应数据的 XML DOM 文档&lt;/li&gt;
&lt;li&gt;status：响应的 HTTP 状态&lt;/li&gt;
&lt;li&gt;statusText：HTTP 状态的说明&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;返回之后，通过检测 status 来决定下一步的操作，而不要依赖 statusText，因为后者在跨浏览器使用时不太可靠。&lt;br&gt;无论内容类型是什么，响应主体的内容都会保存在 responseText 属性中；而对于非 XML 数据而言，responseXML 属性的值将为 null。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发送异步请求时，通常会检测 XHR 对象的 readyState 属性，这个属性表示&lt;strong&gt;请求/响应过程的当前活动阶段&lt;/strong&gt;。可能值如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0： 未初始化。尚未调用 open()方法&lt;/li&gt;
&lt;li&gt;1： 启动。已经调用 open()方法，但还没调用 send()方法&lt;/li&gt;
&lt;li&gt;2： 发送。已经调用了 send()方法，但尚未接收到响应&lt;/li&gt;
&lt;li&gt;3： 接收。已经接收到部分响应数据&lt;/li&gt;
&lt;li&gt;4： 完成。已经接收全部响应数据，而且已经可以在客户端中使用了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;readystatechange 事件，可以用来检测每次状态变化后 readyState 的值。通常只关注值为 4 的时候。&lt;br&gt;不过，必须在调用 open()之前指定 onreadystatechange 事件处理程序才能确保跨浏览器兼容性。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var xhr = createXHR();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.onreadystatechange = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (xhr.readyState == 4) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if ( (xhr.status &amp;gt;= 200 &amp;amp;&amp;amp; xhr.status &amp;lt;= 300) || xhr.status == 304 ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			alert(xhr.responseText);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			alert(&amp;quot;Request was unsuccessful: &amp;quot; + xhr.status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.open(&amp;quot;get&amp;quot;, &amp;quot;example.txt&amp;quot;, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.send(null);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;To-be-continued…&quot;&gt;&lt;a href=&quot;#To-be-continued…&quot; class=&quot;headerlink&quot; title=&quot;(To be continued…)&quot;&gt;&lt;/a&gt;(To be continued…)&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;XMLHttpRequest-对象&quot;&gt;&lt;a href=&quot;#XMLHttpRequest-对象&quot; class=&quot;headerlink&quot; title=&quot;XMLHttpRequest 对象&quot;&gt;&lt;/a&gt;XMLHttpRequest 对象&lt;/h1&gt;&lt;p&gt;AJAX技术的核心。
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>超时调用和间隔调用</title>
    <link href="http://yoursite.com/2016/03/16/setTimeout-setInterval/"/>
    <id>http://yoursite.com/2016/03/16/setTimeout-setInterval/</id>
    <published>2016-03-15T17:12:55.000Z</published>
    <updated>2016-03-27T02:06:16.999Z</updated>
    
    <content type="html">&lt;p&gt;setTimeout() 和 setInterval() 都是 window 对象的方法。&lt;/p&gt;
&lt;h1 id=&quot;超时调用（setTimeout）&quot;&gt;&lt;a href=&quot;#超时调用（setTimeout）&quot; class=&quot;headerlink&quot; title=&quot;超时调用（setTimeout）&quot;&gt;&lt;/a&gt;超时调用（setTimeout）&lt;/h1&gt;&lt;p&gt;顾名思义，setTimeout()通过设置超时值，以在指定的时间（超时值）过后的来执行某段代码。&lt;/p&gt;
&lt;p&gt;setTimeout()接收两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含 JavaScript 代码的字符串（跟eval()解析的字符串一样） / 一个函数（可以是一个函数体，也可以是一个函数名）&lt;/li&gt;
&lt;li&gt;超时值（单位：毫秒）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方法会返回一个ID，作为计划执行代码的唯一标识符。可以通过 &lt;strong&gt;clearTimeout(ID)&lt;/strong&gt;方法在指定时间过去之前来取消超时调用。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var timer = setTimeout(function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	console.log(&amp;quot;hello&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, 1000);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clearTimeout(timer);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，一般以函数作为第一个参数，使用字符串的话可能会导致性能损失，故不推荐传递字符串&lt;/p&gt;
&lt;p&gt;注意：尽管设置了超时值，但是经过该时间后，也不一定会执行指定的代码段。因为 JavaScript 是一个&lt;strong&gt;单线程&lt;/strong&gt;的解释器，一定时间内只能执行一段代码。为了控制要执行的代码，JS 有一个任务队列，这些任务会&lt;strong&gt;按照它们在队列中的顺序执行&lt;/strong&gt;。setTimeout()方法只是&lt;strong&gt;延迟了将某个任务添加到队列的时间&lt;/strong&gt;。因此，当任务队列为空，添加的代码便会立刻执行；否则，则需等队列前面的代码全部执行完了以后再执行。&lt;/p&gt;
&lt;h1 id=&quot;间歇调用（setInterval）&quot;&gt;&lt;a href=&quot;#间歇调用（setInterval）&quot; class=&quot;headerlink&quot; title=&quot;间歇调用（setInterval）&quot;&gt;&lt;/a&gt;间歇调用（setInterval）&lt;/h1&gt;&lt;p&gt;setInterval()方法会根据设置的时间间隔来重复执行代码，直到间歇调用被取消或者是页面被卸载才停止。&lt;br&gt;接收的参数和 setTimeout()相同。&lt;br&gt;同样，也会返回一个 ID，可以通过 clearInterval(ID)来取消。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var num = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function increaseNum()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	num++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 当 num 等于 10 时，取消后续的调用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if(num === 10) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		clearInterval(timer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		alert(&amp;quot;DONE~&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var timer = setInterval(increaseNum, 1000);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一般来说，使用 setTimeout 来模拟 setInterval 是一种最佳模式。因为后一个间歇调用可能会在前一个间歇调用结束之前启动。而使用超时调用，则完全可以避免。如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var num = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function increaseNum()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	num++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if(num &amp;lt; 10) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		setTimeout(increaseNum, 1000);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		alert(&amp;quot;DONE~&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setTimeout(increaseNum, 1000);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 从中可看出，使用超时调用，没有必要跟踪其 ID，因为每次执行完代码，如果不再设置一次超时调用的话，调用就自动停止&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;To-be-continued…&quot;&gt;&lt;a href=&quot;#To-be-continued…&quot; class=&quot;headerlink&quot; title=&quot;(To be continued…)&quot;&gt;&lt;/a&gt;(To be continued…)&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;setTimeout() 和 setInterval() 都是 window 对象的方法。&lt;/p&gt;
&lt;h1 id=&quot;超时调用（setTimeout）&quot;&gt;&lt;a href=&quot;#超时调用（setTimeout）&quot; class=&quot;headerlink&quot; title=&quot;超时调用（se
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数据类型的判定</title>
    <link href="http://yoursite.com/2016/03/13/type-examine/"/>
    <id>http://yoursite.com/2016/03/13/type-examine/</id>
    <published>2016-03-13T02:22:44.000Z</published>
    <updated>2016-04-11T14:20:12.864Z</updated>
    
    <content type="html">&lt;h1 id=&quot;js数据类型&quot;&gt;&lt;a href=&quot;#js数据类型&quot; class=&quot;headerlink&quot; title=&quot;js数据类型&quot;&gt;&lt;/a&gt;js数据类型&lt;/h1&gt;&lt;h2 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;因为我们可以操作保存在变量中的实际的值，所以这些类型是按值访问的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Null&lt;/li&gt;
&lt;li&gt;Undefined&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;引用类型&quot;&gt;&lt;a href=&quot;#引用类型&quot; class=&quot;headerlink&quot; title=&quot;引用类型&quot;&gt;&lt;/a&gt;引用类型&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;引用类型的值是保存在内存中的对象&lt;br&gt;在操作对象时，事实上是在操作对象的引用，而不是实际的对象&lt;br&gt;因此可以说引用类型的值是按引用访问（地址指针）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;# Undefined 类型&lt;/strong&gt;&lt;br&gt;Undefined 类型只有一个值——undefined&lt;br&gt;值得注意的是：包含 undefined 值的变量与尚未定义的变量还是不一样的，如下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var message;	// 声明时默认取得了 undefined 值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 下面这个变量没有声明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// var age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(message);	// &amp;quot;undefined&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(age);	// 报错&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但如果对 age（未声明变量） 使用 typeof 的话，也会返回 undefined&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;# Null 类型&lt;/strong&gt;&lt;br&gt;类似 Undefined，Null 类型也是只有一个值——null。&lt;br&gt;null表示一个空对象指针，因此&lt;em&gt;当使用 typeof null 时，会返回“object”&lt;/em&gt;&lt;br&gt;事实上，undefined 是派生自 null 值得，因此有如下判断时返回 true&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;alert(null == undefined);	// true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存 null 值。&lt;br&gt;这样做不仅可以体现 null 作为空对象指针的惯例，而且有助于进一步区分 null 和 undefined。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;typeof-操作符&quot;&gt;&lt;a href=&quot;#typeof-操作符&quot; class=&quot;headerlink&quot; title=&quot;typeof 操作符&quot;&gt;&lt;/a&gt;typeof 操作符&lt;/h1&gt;&lt;p&gt;typeof 可以检测原始值类型，也就是基本类型。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof &amp;quot;abc&amp;quot; === &amp;quot;string&amp;quot; );	// true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof 123 === &amp;quot;number&amp;quot; );	// true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof true === &amp;quot;boolean&amp;quot; );	// true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof undefined === &amp;quot;undefined&amp;quot; );	// true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof null === &amp;quot;null&amp;quot; );	// true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是，但基本类型，在相同值的情况下，如果是利用构造函数来定义的话，typeof 返回的结果都只会是 object&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof new String(&amp;quot;abc&amp;quot;) );	// &amp;quot;object&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof new Number(123) );	// &amp;quot;object&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof new boolean(true) );	// &amp;quot;object&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此，typeof 具有局限性。&lt;/p&gt;
&lt;h1 id=&quot;instanceof-区别引用类型&quot;&gt;&lt;a href=&quot;#instanceof-区别引用类型&quot; class=&quot;headerlink&quot; title=&quot;instanceof 区别引用类型&quot;&gt;&lt;/a&gt;instanceof 区别引用类型&lt;/h1&gt;&lt;p&gt;对于引用类型的数据，单纯使用 typeof 是无法达到目的的。所以，要用 instanceof 操作符来区别数组、函数和对象&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(a instanceof Object) &amp;amp;&amp;amp; !(a instanceof Array) &amp;amp;&amp;amp; !(a instanceof Function)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(a instanceof Object) &amp;amp;&amp;amp; (a instanceof Function)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(a instanceof Object) &amp;amp;&amp;amp; (a instanceof Array)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但 instanceof 也有它严重的局限性：不能跨帧使用。&lt;/p&gt;
&lt;p&gt;假设一个浏览器帧A（frame A）里的一个对象被传入到帧B（frame B）中，两个帧中都定义了 Person 构造函数，如果来自帧A 的对象是帧A 中Person的实例，则有：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;personA instanceof frameAPerson   //true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;personA instanceof frameBPerson   //false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为每个帧都有 Person 的拷贝，它被认为是该帧中的Person的拷贝实例，尽管两个定义是一样的。&lt;br&gt;同样的问题也出现在其他两个非常重要的内置类型中：数组和函数，所以检测这两个内置类型一般不用 instanceof。&lt;br&gt;而且 instanceof 对于对象的整个原型链都能检测到，例如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var now = new Date();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;now instanceof Date;    //true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;now instanceof Object;  //true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此，用 instanceof 检测某一对象是否属于特定类型并非最佳。&lt;/p&gt;
&lt;h1 id=&quot;使用内置对象的-class-属性来判断&quot;&gt;&lt;a href=&quot;#使用内置对象的-class-属性来判断&quot; class=&quot;headerlink&quot; title=&quot;使用内置对象的 class 属性来判断&quot;&gt;&lt;/a&gt;使用内置对象的 class 属性来判断&lt;/h1&gt;&lt;h2 id=&quot;使用-Object-prototype-toString-call-来判断&quot;&gt;&lt;a href=&quot;#使用-Object-prototype-toString-call-来判断&quot; class=&quot;headerlink&quot; title=&quot;使用 Object.prototype.toString.call() 来判断&quot;&gt;&lt;/a&gt;使用 &lt;strong&gt;Object.prototype.toString.call()&lt;/strong&gt; 来判断&lt;/h2&gt;&lt;p&gt;[[Class]]是一个内部属性,所有的对象(原生对象和宿主对象)都拥有该属性，通过该属性的值可以用来判断一个原生对象属于哪种内置类型，而这个属性只能通过Object.prototype.toString 方法来访问&lt;/p&gt;
&lt;p&gt;在 ES5 中，对于 toString() 方法被调用时，执行的步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果this的值为undefined,则返回”[object Undefined]”&lt;/li&gt;
&lt;li&gt;如果this的值为null,则返回”[object Null]”&lt;/li&gt;
&lt;li&gt;让O成为调用ToObject(this)的结果&lt;/li&gt;
&lt;li&gt;让class成为O的内部属性[[Class]]的值&lt;/li&gt;
&lt;li&gt;返回三个字符串”[object “, class, 以及 “]”连接后的新字符串&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以判断变量类型的方法可以如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 直接传入待判定变量和匹配类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 返回布尔值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function isType(data, type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return Object.prototype.toString.call(data).slice(8,-1) === type ? true : false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 直接传入某个变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 返回该变量的类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function getType(data) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return Object.prototype.toString.call(data).slice(8,-1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;js数据类型&quot;&gt;&lt;a href=&quot;#js数据类型&quot; class=&quot;headerlink&quot; title=&quot;js数据类型&quot;&gt;&lt;/a&gt;js数据类型&lt;/h1&gt;&lt;h2 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器渲染页面</title>
    <link href="http://yoursite.com/2016/03/12/how-browser-paint-a-page/"/>
    <id>http://yoursite.com/2016/03/12/how-browser-paint-a-page/</id>
    <published>2016-03-12T15:47:55.000Z</published>
    <updated>2016-03-13T03:04:42.683Z</updated>
    
    <content type="html">&lt;h1 id=&quot;浏览器渲染过程&quot;&gt;&lt;a href=&quot;#浏览器渲染过程&quot; class=&quot;headerlink&quot; title=&quot;浏览器渲染过程&quot;&gt;&lt;/a&gt;浏览器渲染过程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;获取 HTML、css、js文件&lt;/li&gt;
&lt;li&gt;将HTML代码形成&lt;strong&gt;DOM Tree&lt;/strong&gt;，解析样式为 &lt;strong&gt;CSSOM Tree&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;合并 DOM 和 CSSOM，去除&lt;em&gt;不可见元素&lt;/em&gt;以及设置了&lt;em&gt;display:none&lt;/em&gt;属性的元素，&lt;strong&gt;构建 render tree&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;对 render tree 的每个元素，其实也是 DOM 元素，计算其形状和位置，进行&lt;strong&gt;布局&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;将每个节点元素转化为实际像素&lt;strong&gt;绘制&lt;/strong&gt;在视口上，也称“&lt;strong&gt;栅格化&lt;/strong&gt;”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;p.s.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不可见元素：&amp;lt;html&amp;gt;、&amp;lt;head&amp;gt;、&amp;lt;meta&amp;gt;、&amp;lt;link&amp;gt;、&amp;lt;style&amp;gt;、&amp;lt;script&amp;gt;等&lt;/p&gt;
&lt;p&gt;render tree（渲染树）：在 Webkit 中这些对象被称为渲染器或渲染对象，而在 Gecko 中称之为“frame”。在渲染树中，每一段文本字符串都表现为独立的渲染器。每一个渲染对象都包含与之对应的 DOM 对象，或者文本块，还加上计算过的样式。换言之，渲染树是一个文档对象模型的直观展示。&lt;/p&gt;
&lt;h2 id=&quot;重绘&quot;&gt;&lt;a href=&quot;#重绘&quot; class=&quot;headerlink&quot; title=&quot;重绘&quot;&gt;&lt;/a&gt;重绘&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;当render tree中元素的某些属性需要更新，而这些元素只影响外观、风格，不影响元素在网页中的位置（如：background-color、border-color、visibility等），浏览器就会重新构造样式，也就是&lt;strong&gt;重绘&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;重排&quot;&gt;&lt;a href=&quot;#重排&quot; class=&quot;headerlink&quot; title=&quot;重排&quot;&gt;&lt;/a&gt;重排&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;DOM 操作（元素添加，删除，修改，或者元素顺序的改变）&lt;/li&gt;
&lt;li&gt;内容变化，包括表单域内的文本改变&lt;/li&gt;
&lt;li&gt;CSS 属性的计算或改变&lt;/li&gt;
&lt;li&gt;添加或删除样式表&lt;/li&gt;
&lt;li&gt;更改“类”的属性&lt;/li&gt;
&lt;li&gt;浏览器窗口的操作（缩放，滚动）&lt;/li&gt;
&lt;li&gt;伪类激活（:hover）&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;浏览器渲染过程&quot;&gt;&lt;a href=&quot;#浏览器渲染过程&quot; class=&quot;headerlink&quot; title=&quot;浏览器渲染过程&quot;&gt;&lt;/a&gt;浏览器渲染过程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;获取 HTML、css、js文件&lt;/li&gt;
&lt;li&gt;将HTML代码形成&lt;strong&gt;D
    
    </summary>
    
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>my first new post</title>
    <link href="http://yoursite.com/2016/03/07/my-first-new-post/"/>
    <id>http://yoursite.com/2016/03/07/my-first-new-post/</id>
    <published>2016-03-07T12:00:04.000Z</published>
    <updated>2016-03-29T16:29:02.748Z</updated>
    
    <content type="html">&lt;p&gt;正文Test&lt;/p&gt;
&lt;h1 id=&quot;这里是一级标题&quot;&gt;&lt;a href=&quot;#这里是一级标题&quot; class=&quot;headerlink&quot; title=&quot;这里是一级标题&quot;&gt;&lt;/a&gt;这里是一级标题&lt;/h1&gt;&lt;h2 id=&quot;这里是二级标题&quot;&gt;&lt;a href=&quot;#这里是二级标题&quot; class=&quot;headerlink&quot; title=&quot;这里是二级标题&quot;&gt;&lt;/a&gt;这里是二级标题&lt;/h2&gt;&lt;p&gt;点击进入我的&lt;a href=&quot;https://github.com/huangza&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;这里是第二个二级标题&quot;&gt;&lt;a href=&quot;#这里是第二个二级标题&quot; class=&quot;headerlink&quot; title=&quot;这里是第二个二级标题&quot;&gt;&lt;/a&gt;这里是第二个二级标题&lt;/h2&gt;&lt;p&gt;点击进入&lt;a href=&quot;http://www.jianshu.com/p/q81RER&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown教程（献给写作者的 Markdown 新手指南）&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;正文Test&lt;/p&gt;
&lt;h1 id=&quot;这里是一级标题&quot;&gt;&lt;a href=&quot;#这里是一级标题&quot; class=&quot;headerlink&quot; title=&quot;这里是一级标题&quot;&gt;&lt;/a&gt;这里是一级标题&lt;/h1&gt;&lt;h2 id=&quot;这里是二级标题&quot;&gt;&lt;a href=&quot;#这里是二级标题&quot; cla
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="博客，文章" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%EF%BC%8C%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/03/07/hello-world/"/>
    <id>http://yoursite.com/2016/03/07/hello-world/</id>
    <published>2016-03-07T02:48:04.059Z</published>
    <updated>2016-08-20T08:48:49.167Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
