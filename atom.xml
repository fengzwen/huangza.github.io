<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Andre Huang</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-03-15T17:15:09.800Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Andre Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>XHR&amp;AJAX</title>
    <link href="http://yoursite.com/2016/03/16/XHR-AJAX/"/>
    <id>http://yoursite.com/2016/03/16/XHR-AJAX/</id>
    <published>2016-03-15T17:13:24.000Z</published>
    <updated>2016-03-15T17:15:09.800Z</updated>
    
    <content type="html">&lt;h1 id=&quot;XMLHttpRequest-对象&quot;&gt;&lt;a href=&quot;#XMLHttpRequest-对象&quot; class=&quot;headerlink&quot; title=&quot;XMLHttpRequest 对象&quot;&gt;&lt;/a&gt;XMLHttpRequest 对象&lt;/h1&gt;&lt;p&gt;AJAX技术的核心。&lt;/p&gt;
&lt;p&gt;是通过 MSXML 库中的一个 ActiveX 对象实现。&lt;/p&gt;
&lt;p&gt;在 IE 中可能会遇到三种不同版本的 XHR 对象： MSXML2.XMLHttp、MSXML2.XMLHttp.3.0 和 MSXML2.XMLHttp.6.0&lt;/p&gt;
&lt;p&gt;创建 XHR 对象的方法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function createXHR() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (typeof XMLHttpRequest != &amp;quot;undefined&amp;quot;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 首先检测原生 XHR 对象是否存在，如果存在则返回它的新实例。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return new XMLHttpRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; else if (typeof ActiveXObject != &amp;quot;undefined&amp;quot;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 如果原生对象不存在，则检测 ActiveX 对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (typeof arguments.callee.activeXString != &amp;quot;string&amp;quot;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			var version = [ &amp;quot;MSXML2.XMLHttp.6.0&amp;quot;, &amp;quot;MSXML2.XMLHttp.3.0&amp;quot;, &amp;quot;MSXML2.XMLHttp&amp;quot; ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			i, len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			for (i = 0, len=version.length; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					new ActiveXObject(version[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					arguments.callee.activeXString = version[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125; catch (ex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					// 跳过&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return new ActiveXObject(arguments.callee.activeXString);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 如果两种对象都不存在，就抛出错误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		throw new Error(&amp;quot;No XHR object available.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于其他浏览器中对 XHR 的实现与 IE 最早的实现是兼容的，所以可以在所有的浏览器中以相同方式使用上面创建的 xhr 对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;XHR-的用法&quot;&gt;&lt;a href=&quot;#XHR-的用法&quot; class=&quot;headerlink&quot; title=&quot;XHR 的用法&quot;&gt;&lt;/a&gt;XHR 的用法&lt;/h2&gt;&lt;p&gt;&lt;strong&gt; open() &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接受 3 个参数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要发送的请求的类型（”get”、”post” 等）&lt;/li&gt;
&lt;li&gt;请求的URL&lt;/li&gt;
&lt;li&gt;表示是否异步发送请求的布尔值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;p.s.&lt;br&gt;1、URL 可以是相对地址（一般推荐），也可以是绝对路径&lt;/p&gt;
&lt;p&gt;2、调用 open()方法只是启动一个请求以备发送，并没有真正发送出去&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只能向同一个域中使用相同端口和协议的 URL 发送请求。&lt;br&gt;如果 URL 与启动请求的页面有任何差别，都会引发安全错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt; send() &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在使用 open() 方法启动请求之后，可以调用 send() 方法&lt;/p&gt;
&lt;p&gt;接受一个参数： 作为请求主体发送的数据（不需要的话则必须传入 null，因为对于部分浏览器来说是该参数是必须的）&lt;/p&gt;
&lt;p&gt;服务器响应后，JS 代码继续执行，并且响应的数据会自动填充 XHR 对象的属性。相关属性如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;responseText：作为响应主体被返回的文本&lt;/li&gt;
&lt;li&gt;responseXML：如果响应的内容是”text/xml”或”application/xml”，这个属性中将保存包含着响应数据的 XML DOM 文档&lt;/li&gt;
&lt;li&gt;status：响应的 HTTP 状态&lt;/li&gt;
&lt;li&gt;statusText：HTTP 状态的说明&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;返回之后，通过检测 status 来决定下一步的操作，而不要依赖 statusText，因为后者在跨浏览器使用时不太可靠。&lt;br&gt;无论内容类型是什么，响应主体的内容都会保存在 responseText 属性中；而对于非 XML 数据而言，responseXML 属性的值将为 null。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发送异步请求时，通常会检测 XHR 对象的 readyState 属性，这个属性表示&lt;strong&gt;请求/响应过程的当前活动阶段&lt;/strong&gt;。可能值如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0： 未初始化。尚未调用 open()方法&lt;/li&gt;
&lt;li&gt;1： 启动。已经调用 open()方法，但还没调用 send()方法&lt;/li&gt;
&lt;li&gt;2： 发送。已经调用了 send()方法，但尚未接收到响应&lt;/li&gt;
&lt;li&gt;3： 接收。已经接收到部分响应数据&lt;/li&gt;
&lt;li&gt;4： 完成。已经接收全部响应数据，而且已经可以在客户端中使用了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;readystatechange 事件，可以用来检测每次状态变化后 readyState 的值。通常只关注值为 4 的时候。&lt;br&gt;不过，必须在调用 open()之前指定 onreadystatechange 事件处理程序才能确保跨浏览器兼容性。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var xhr = createXHR();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.onreadystatechange = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (xhr.readyState == 4) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if ( (xhr.status &amp;gt;= 200 &amp;amp;&amp;amp; xhr.status &amp;lt;= 300) || xhr.status == 304 ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			alert(xhr.responseText);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			alert(&amp;quot;Request was unsuccessful: &amp;quot; + xhr.status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.open(&amp;quot;get&amp;quot;, &amp;quot;example.txt&amp;quot;, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.send(null);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;To-be-continued…&quot;&gt;&lt;a href=&quot;#To-be-continued…&quot; class=&quot;headerlink&quot; title=&quot;(To be continued…)&quot;&gt;&lt;/a&gt;(To be continued…)&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;XMLHttpRequest-对象&quot;&gt;&lt;a href=&quot;#XMLHttpRequest-对象&quot; class=&quot;headerlink&quot; title=&quot;XMLHttpRequest 对象&quot;&gt;&lt;/a&gt;XMLHttpRequest 对象&lt;/h1&gt;&lt;p&gt;AJAX技术的核心。
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>setTimeout&amp;setInterval</title>
    <link href="http://yoursite.com/2016/03/16/setTimeout-setInterval/"/>
    <id>http://yoursite.com/2016/03/16/setTimeout-setInterval/</id>
    <published>2016-03-15T17:12:55.000Z</published>
    <updated>2016-03-15T17:15:28.209Z</updated>
    
    <content type="html">&lt;p&gt;setTimeout() 和 setInterval() 都是 window 对象的方法。&lt;/p&gt;
&lt;h1 id=&quot;超时调用（setTimeout）&quot;&gt;&lt;a href=&quot;#超时调用（setTimeout）&quot; class=&quot;headerlink&quot; title=&quot;超时调用（setTimeout）&quot;&gt;&lt;/a&gt;超时调用（setTimeout）&lt;/h1&gt;&lt;p&gt;顾名思义，setTimeout()通过设置超时值，以在指定的时间（超时值）过后的来执行某段代码。&lt;/p&gt;
&lt;p&gt;setTimeout()接收两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含 JavaScript 代码的字符串（跟eval()解析的字符串一样） / 一个函数（可以是一个函数体，也可以是一个函数名）&lt;/li&gt;
&lt;li&gt;超时值（单位：毫秒）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方法会返回一个ID，作为计划执行代码的唯一标识符。可以通过 &lt;strong&gt;clearTimeout(ID)&lt;/strong&gt;方法在指定时间过去之前来取消超时调用。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var timer = setTimeout(function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	console.log(&amp;quot;hello&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, 1000);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clearTimeout(timer);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，一般以函数作为第一个参数，使用字符串的话可能会导致性能损失，故不推荐传递字符串&lt;/p&gt;
&lt;p&gt;注意：尽管设置了超时值，但是经过该时间后，也不一定会执行指定的代码段。因为 JavaScript 是一个&lt;strong&gt;单线程&lt;/strong&gt;的解释器，一定时间内只能执行一段代码。为了控制要执行的代码，JS 有一个任务队列，这些任务会&lt;strong&gt;按照它们在队列中的顺序执行&lt;/strong&gt;。setTimeout()方法只是&lt;strong&gt;延迟了将某个任务添加到队列的时间&lt;/strong&gt;。因此，当任务队列为空，添加的代码便会立刻执行；否则，则需等队列前面的代码全部执行完了以后再执行。&lt;/p&gt;
&lt;h1 id=&quot;间歇调用（setInterval）&quot;&gt;&lt;a href=&quot;#间歇调用（setInterval）&quot; class=&quot;headerlink&quot; title=&quot;间歇调用（setInterval）&quot;&gt;&lt;/a&gt;间歇调用（setInterval）&lt;/h1&gt;&lt;p&gt;setInterval()方法会根据设置的时间间隔来重复执行代码，直到间歇调用被取消或者是页面被卸载才停止。&lt;br&gt;接收的参数和 setTimeout()相同。&lt;br&gt;同样，也会返回一个 ID，可以通过 clearInterval(ID)来取消。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var num = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function increaseNum()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	num++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 当 num 等于 10 时，取消后续的调用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if(num === 10) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		clearInterval(timer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		alert(&amp;quot;DONE~&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var timer = setInterval(increaseNum, 1000);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一般来说，使用 setTimeout 来模拟 setInterval 是一种最佳模式。因为后一个间歇调用可能会在前一个间歇调用结束之前启动。而使用超时调用，则完全可以避免。如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var num = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function increaseNum()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	num++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if(num &amp;lt; 10) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		setTimeout(increaseNum, 1000);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		alert(&amp;quot;DONE~&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setTimeout(increaseNum, 1000);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 从中可看出，使用超时调用，没有必要跟踪其 ID，因为每次执行完代码，如果不再设置一次超时调用的话，调用就自动停止&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;To-be-continued…&quot;&gt;&lt;a href=&quot;#To-be-continued…&quot; class=&quot;headerlink&quot; title=&quot;(To be continued…)&quot;&gt;&lt;/a&gt;(To be continued…)&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;setTimeout() 和 setInterval() 都是 window 对象的方法。&lt;/p&gt;
&lt;h1 id=&quot;超时调用（setTimeout）&quot;&gt;&lt;a href=&quot;#超时调用（setTimeout）&quot; class=&quot;headerlink&quot; title=&quot;超时调用（se
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>js数据类型的判定</title>
    <link href="http://yoursite.com/2016/03/13/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%88%A4%E5%AE%9A/"/>
    <id>http://yoursite.com/2016/03/13/js数据类型的判定/</id>
    <published>2016-03-13T02:22:44.000Z</published>
    <updated>2016-03-14T16:19:46.283Z</updated>
    
    <content type="html">&lt;h1 id=&quot;js数据类型&quot;&gt;&lt;a href=&quot;#js数据类型&quot; class=&quot;headerlink&quot; title=&quot;js数据类型&quot;&gt;&lt;/a&gt;js数据类型&lt;/h1&gt;&lt;h2 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;因为我们可以操作保存在变量中的实际的值，所以这些类型是按值访问的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Null&lt;/li&gt;
&lt;li&gt;Undefined&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;引用类型&quot;&gt;&lt;a href=&quot;#引用类型&quot; class=&quot;headerlink&quot; title=&quot;引用类型&quot;&gt;&lt;/a&gt;引用类型&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;引用类型的值是保存在内存中的对象&lt;br&gt;在操作对象时，事实上是在操作对象的引用，而不是实际的对象&lt;br&gt;因此可以说引用类型的值是按引用访问（地址指针）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;# Undefined 类型&lt;/strong&gt;&lt;br&gt;Undefined 类型只有一个值——undefined&lt;br&gt;值得注意的是：包含 undefined 值的变量与尚未定义的变量还是不一样的，如下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var message;	// 声明时默认取得了 undefined 值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 下面这个变量没有声明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// var age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(message);	// &amp;quot;undefined&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(age);	// 报错&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但如果对 age（未声明变量） 使用 typeof 的话，也会返回 undefined&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;# Null 类型&lt;/strong&gt;&lt;br&gt;类似 Undefined，Null 类型也是只有一个值——null。&lt;br&gt;null表示一个空对象指针，因此&lt;em&gt;当使用 typeof null 时，会返回“object”&lt;/em&gt;&lt;br&gt;事实上，undefined 是派生自 null 值得，因此有如下判断时返回 true&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;alert(null == undefined);	// true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存 null 值。&lt;br&gt;这样做不仅可以体现 null 作为空对象指针的惯例，而且有助于进一步区分 null 和 undefined。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;typeof-操作符&quot;&gt;&lt;a href=&quot;#typeof-操作符&quot; class=&quot;headerlink&quot; title=&quot;typeof 操作符&quot;&gt;&lt;/a&gt;typeof 操作符&lt;/h1&gt;&lt;p&gt;typeof 可以检测原始值类型，也就是基本类型。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof &amp;quot;abc&amp;quot; === &amp;quot;string&amp;quot; );	// true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof 123 === &amp;quot;number&amp;quot; );	// true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof true === &amp;quot;boolean&amp;quot; );	// true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof undefined === &amp;quot;undefined&amp;quot; );	// true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof null === &amp;quot;null&amp;quot; );	// true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是，但基本类型，在相同值的情况下，如果是利用构造函数来定义的话，typeof 返回的结果都只会是 object&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof new String(&amp;quot;abc&amp;quot;) );	// &amp;quot;object&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof new Number(123) );	// &amp;quot;object&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof new boolean(true) );	// &amp;quot;object&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此，typeof 具有局限性。&lt;/p&gt;
&lt;h1 id=&quot;instanceof-区别引用类型&quot;&gt;&lt;a href=&quot;#instanceof-区别引用类型&quot; class=&quot;headerlink&quot; title=&quot;instanceof 区别引用类型&quot;&gt;&lt;/a&gt;instanceof 区别引用类型&lt;/h1&gt;&lt;p&gt;对于引用类型的数据，单纯使用 typeof 是无法达到目的的。所以，要用 instanceof 操作符来区别数组、函数和对象&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(a instanceof Object) &amp;amp;&amp;amp; !(a instanceof Array) &amp;amp;&amp;amp; !(a instanceof Function)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(a instanceof Object) &amp;amp;&amp;amp; (a instanceof Function)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(a instanceof Object) &amp;amp;&amp;amp; (a instanceof Array)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但 instanceof 也有它严重的局限性：不能跨帧使用。&lt;/p&gt;
&lt;p&gt;假设一个浏览器帧A（frame A）里的一个对象被传入到帧B（frame B）中，两个帧中都定义了 Person 构造函数，如果来自帧A 的对象是帧A 中Person的实例，则有：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;personA instanceof frameAPerson   //true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;personA instanceof frameBPerson   //false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为每个帧都有 Person 的拷贝，它被认为是该帧中的Person的拷贝实例，尽管两个定义是一样的。&lt;br&gt;同样的问题也出现在其他两个非常重要的内置类型中：数组和函数，所以检测这两个内置类型一般不用 instanceof。&lt;br&gt;而且 instanceof 对于对象的整个原型链都能检测到，例如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var now = new Date();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;now instanceof Date;    //true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;now instanceof Object;  //true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此，用 instanceof 检测某一对象是否属于特定类型并非最佳。&lt;/p&gt;
&lt;h1 id=&quot;未完待续&quot;&gt;&lt;a href=&quot;#未完待续&quot; class=&quot;headerlink&quot; title=&quot;(未完待续)&quot;&gt;&lt;/a&gt;(未完待续)&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;js数据类型&quot;&gt;&lt;a href=&quot;#js数据类型&quot; class=&quot;headerlink&quot; title=&quot;js数据类型&quot;&gt;&lt;/a&gt;js数据类型&lt;/h1&gt;&lt;h2 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器渲染页面</title>
    <link href="http://yoursite.com/2016/03/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2/"/>
    <id>http://yoursite.com/2016/03/12/浏览器渲染页面/</id>
    <published>2016-03-12T15:47:55.000Z</published>
    <updated>2016-03-13T03:04:42.683Z</updated>
    
    <content type="html">&lt;h1 id=&quot;浏览器渲染过程&quot;&gt;&lt;a href=&quot;#浏览器渲染过程&quot; class=&quot;headerlink&quot; title=&quot;浏览器渲染过程&quot;&gt;&lt;/a&gt;浏览器渲染过程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;获取 HTML、css、js文件&lt;/li&gt;
&lt;li&gt;将HTML代码形成&lt;strong&gt;DOM Tree&lt;/strong&gt;，解析样式为 &lt;strong&gt;CSSOM Tree&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;合并 DOM 和 CSSOM，去除&lt;em&gt;不可见元素&lt;/em&gt;以及设置了&lt;em&gt;display:none&lt;/em&gt;属性的元素，&lt;strong&gt;构建 render tree&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;对 render tree 的每个元素，其实也是 DOM 元素，计算其形状和位置，进行&lt;strong&gt;布局&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;将每个节点元素转化为实际像素&lt;strong&gt;绘制&lt;/strong&gt;在视口上，也称“&lt;strong&gt;栅格化&lt;/strong&gt;”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;p.s.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不可见元素：&amp;lt;html&amp;gt;、&amp;lt;head&amp;gt;、&amp;lt;meta&amp;gt;、&amp;lt;link&amp;gt;、&amp;lt;style&amp;gt;、&amp;lt;script&amp;gt;等&lt;/p&gt;
&lt;p&gt;render tree（渲染树）：在 Webkit 中这些对象被称为渲染器或渲染对象，而在 Gecko 中称之为“frame”。在渲染树中，每一段文本字符串都表现为独立的渲染器。每一个渲染对象都包含与之对应的 DOM 对象，或者文本块，还加上计算过的样式。换言之，渲染树是一个文档对象模型的直观展示。&lt;/p&gt;
&lt;h2 id=&quot;重绘&quot;&gt;&lt;a href=&quot;#重绘&quot; class=&quot;headerlink&quot; title=&quot;重绘&quot;&gt;&lt;/a&gt;重绘&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;当render tree中元素的某些属性需要更新，而这些元素只影响外观、风格，不影响元素在网页中的位置（如：background-color、border-color、visibility等），浏览器就会重新构造样式，也就是&lt;strong&gt;重绘&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;重排&quot;&gt;&lt;a href=&quot;#重排&quot; class=&quot;headerlink&quot; title=&quot;重排&quot;&gt;&lt;/a&gt;重排&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;DOM 操作（元素添加，删除，修改，或者元素顺序的改变）&lt;/li&gt;
&lt;li&gt;内容变化，包括表单域内的文本改变&lt;/li&gt;
&lt;li&gt;CSS 属性的计算或改变&lt;/li&gt;
&lt;li&gt;添加或删除样式表&lt;/li&gt;
&lt;li&gt;更改“类”的属性&lt;/li&gt;
&lt;li&gt;浏览器窗口的操作（缩放，滚动）&lt;/li&gt;
&lt;li&gt;伪类激活（:hover）&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;浏览器渲染过程&quot;&gt;&lt;a href=&quot;#浏览器渲染过程&quot; class=&quot;headerlink&quot; title=&quot;浏览器渲染过程&quot;&gt;&lt;/a&gt;浏览器渲染过程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;获取 HTML、css、js文件&lt;/li&gt;
&lt;li&gt;将HTML代码形成&lt;strong&gt;D
    
    </summary>
    
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>my first new post</title>
    <link href="http://yoursite.com/2016/03/07/my-first-new-post/"/>
    <id>http://yoursite.com/2016/03/07/my-first-new-post/</id>
    <published>2016-03-07T12:00:04.000Z</published>
    <updated>2016-03-07T12:26:04.075Z</updated>
    
    <content type="html">&lt;p&gt;正文Test&lt;/p&gt;
&lt;h1 id=&quot;这里是一级标题&quot;&gt;&lt;a href=&quot;#这里是一级标题&quot; class=&quot;headerlink&quot; title=&quot;这里是一级标题&quot;&gt;&lt;/a&gt;这里是一级标题&lt;/h1&gt;&lt;h2 id=&quot;这里是二级标题&quot;&gt;&lt;a href=&quot;#这里是二级标题&quot; class=&quot;headerlink&quot; title=&quot;这里是二级标题&quot;&gt;&lt;/a&gt;这里是二级标题&lt;/h2&gt;&lt;p&gt;点击进入我的&lt;a href=&quot;https://github.com/huangza&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;这里是第二个二级标题&quot;&gt;&lt;a href=&quot;#这里是第二个二级标题&quot; class=&quot;headerlink&quot; title=&quot;这里是第二个二级标题&quot;&gt;&lt;/a&gt;这里是第二个二级标题&lt;/h2&gt;&lt;p&gt;点击进入&lt;a href=&quot;http://www.jianshu.com/p/q81RER&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown教程（献给写作者的 Markdown 新手指南）&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;正文Test&lt;/p&gt;
&lt;h1 id=&quot;这里是一级标题&quot;&gt;&lt;a href=&quot;#这里是一级标题&quot; class=&quot;headerlink&quot; title=&quot;这里是一级标题&quot;&gt;&lt;/a&gt;这里是一级标题&lt;/h1&gt;&lt;h2 id=&quot;这里是二级标题&quot;&gt;&lt;a href=&quot;#这里是二级标题&quot; cla
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="博客，文章" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%EF%BC%8C%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/03/07/hello-world/"/>
    <id>http://yoursite.com/2016/03/07/hello-world/</id>
    <published>2016-03-07T02:48:04.059Z</published>
    <updated>2016-03-07T02:48:04.061Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
