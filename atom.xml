<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Andre Huang</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-03-14T16:19:46.283Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Andre Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js数据类型的判定</title>
    <link href="http://yoursite.com/2016/03/13/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%88%A4%E5%AE%9A/"/>
    <id>http://yoursite.com/2016/03/13/js数据类型的判定/</id>
    <published>2016-03-13T02:22:44.000Z</published>
    <updated>2016-03-14T16:19:46.283Z</updated>
    
    <content type="html">&lt;h1 id=&quot;js数据类型&quot;&gt;&lt;a href=&quot;#js数据类型&quot; class=&quot;headerlink&quot; title=&quot;js数据类型&quot;&gt;&lt;/a&gt;js数据类型&lt;/h1&gt;&lt;h2 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;因为我们可以操作保存在变量中的实际的值，所以这些类型是按值访问的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Null&lt;/li&gt;
&lt;li&gt;Undefined&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;引用类型&quot;&gt;&lt;a href=&quot;#引用类型&quot; class=&quot;headerlink&quot; title=&quot;引用类型&quot;&gt;&lt;/a&gt;引用类型&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;引用类型的值是保存在内存中的对象&lt;br&gt;在操作对象时，事实上是在操作对象的引用，而不是实际的对象&lt;br&gt;因此可以说引用类型的值是按引用访问（地址指针）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;# Undefined 类型&lt;/strong&gt;&lt;br&gt;Undefined 类型只有一个值——undefined&lt;br&gt;值得注意的是：包含 undefined 值的变量与尚未定义的变量还是不一样的，如下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var message;	// 声明时默认取得了 undefined 值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 下面这个变量没有声明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// var age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(message);	// &amp;quot;undefined&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(age);	// 报错&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但如果对 age（未声明变量） 使用 typeof 的话，也会返回 undefined&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;# Null 类型&lt;/strong&gt;&lt;br&gt;类似 Undefined，Null 类型也是只有一个值——null。&lt;br&gt;null表示一个空对象指针，因此&lt;em&gt;当使用 typeof null 时，会返回“object”&lt;/em&gt;&lt;br&gt;事实上，undefined 是派生自 null 值得，因此有如下判断时返回 true&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;alert(null == undefined);	// true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存 null 值。&lt;br&gt;这样做不仅可以体现 null 作为空对象指针的惯例，而且有助于进一步区分 null 和 undefined。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;typeof-操作符&quot;&gt;&lt;a href=&quot;#typeof-操作符&quot; class=&quot;headerlink&quot; title=&quot;typeof 操作符&quot;&gt;&lt;/a&gt;typeof 操作符&lt;/h1&gt;&lt;p&gt;typeof 可以检测原始值类型，也就是基本类型。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof &amp;quot;abc&amp;quot; === &amp;quot;string&amp;quot; );	// true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof 123 === &amp;quot;number&amp;quot; );	// true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof true === &amp;quot;boolean&amp;quot; );	// true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof undefined === &amp;quot;undefined&amp;quot; );	// true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof null === &amp;quot;null&amp;quot; );	// true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是，但基本类型，在相同值的情况下，如果是利用构造函数来定义的话，typeof 返回的结果都只会是 object&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof new String(&amp;quot;abc&amp;quot;) );	// &amp;quot;object&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof new Number(123) );	// &amp;quot;object&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert( typeof new boolean(true) );	// &amp;quot;object&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此，typeof 具有局限性。&lt;/p&gt;
&lt;h1 id=&quot;instanceof-区别引用类型&quot;&gt;&lt;a href=&quot;#instanceof-区别引用类型&quot; class=&quot;headerlink&quot; title=&quot;instanceof 区别引用类型&quot;&gt;&lt;/a&gt;instanceof 区别引用类型&lt;/h1&gt;&lt;p&gt;对于引用类型的数据，单纯使用 typeof 是无法达到目的的。所以，要用 instanceof 操作符来区别数组、函数和对象&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(a instanceof Object) &amp;amp;&amp;amp; !(a instanceof Array) &amp;amp;&amp;amp; !(a instanceof Function)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(a instanceof Object) &amp;amp;&amp;amp; (a instanceof Function)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(a instanceof Object) &amp;amp;&amp;amp; (a instanceof Array)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但 instanceof 也有它严重的局限性：不能跨帧使用。&lt;/p&gt;
&lt;p&gt;假设一个浏览器帧A（frame A）里的一个对象被传入到帧B（frame B）中，两个帧中都定义了 Person 构造函数，如果来自帧A 的对象是帧A 中Person的实例，则有：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;personA instanceof frameAPerson   //true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;personA instanceof frameBPerson   //false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为每个帧都有 Person 的拷贝，它被认为是该帧中的Person的拷贝实例，尽管两个定义是一样的。&lt;br&gt;同样的问题也出现在其他两个非常重要的内置类型中：数组和函数，所以检测这两个内置类型一般不用 instanceof。&lt;br&gt;而且 instanceof 对于对象的整个原型链都能检测到，例如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var now = new Date();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;now instanceof Date;    //true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;now instanceof Object;  //true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此，用 instanceof 检测某一对象是否属于特定类型并非最佳。&lt;/p&gt;
&lt;h1 id=&quot;未完待续&quot;&gt;&lt;a href=&quot;#未完待续&quot; class=&quot;headerlink&quot; title=&quot;(未完待续)&quot;&gt;&lt;/a&gt;(未完待续)&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;js数据类型&quot;&gt;&lt;a href=&quot;#js数据类型&quot; class=&quot;headerlink&quot; title=&quot;js数据类型&quot;&gt;&lt;/a&gt;js数据类型&lt;/h1&gt;&lt;h2 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器渲染页面</title>
    <link href="http://yoursite.com/2016/03/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2/"/>
    <id>http://yoursite.com/2016/03/12/浏览器渲染页面/</id>
    <published>2016-03-12T15:47:55.000Z</published>
    <updated>2016-03-13T03:04:42.683Z</updated>
    
    <content type="html">&lt;h1 id=&quot;浏览器渲染过程&quot;&gt;&lt;a href=&quot;#浏览器渲染过程&quot; class=&quot;headerlink&quot; title=&quot;浏览器渲染过程&quot;&gt;&lt;/a&gt;浏览器渲染过程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;获取 HTML、css、js文件&lt;/li&gt;
&lt;li&gt;将HTML代码形成&lt;strong&gt;DOM Tree&lt;/strong&gt;，解析样式为 &lt;strong&gt;CSSOM Tree&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;合并 DOM 和 CSSOM，去除&lt;em&gt;不可见元素&lt;/em&gt;以及设置了&lt;em&gt;display:none&lt;/em&gt;属性的元素，&lt;strong&gt;构建 render tree&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;对 render tree 的每个元素，其实也是 DOM 元素，计算其形状和位置，进行&lt;strong&gt;布局&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;将每个节点元素转化为实际像素&lt;strong&gt;绘制&lt;/strong&gt;在视口上，也称“&lt;strong&gt;栅格化&lt;/strong&gt;”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;p.s.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不可见元素：&amp;lt;html&amp;gt;、&amp;lt;head&amp;gt;、&amp;lt;meta&amp;gt;、&amp;lt;link&amp;gt;、&amp;lt;style&amp;gt;、&amp;lt;script&amp;gt;等&lt;/p&gt;
&lt;p&gt;render tree（渲染树）：在 Webkit 中这些对象被称为渲染器或渲染对象，而在 Gecko 中称之为“frame”。在渲染树中，每一段文本字符串都表现为独立的渲染器。每一个渲染对象都包含与之对应的 DOM 对象，或者文本块，还加上计算过的样式。换言之，渲染树是一个文档对象模型的直观展示。&lt;/p&gt;
&lt;h2 id=&quot;重绘&quot;&gt;&lt;a href=&quot;#重绘&quot; class=&quot;headerlink&quot; title=&quot;重绘&quot;&gt;&lt;/a&gt;重绘&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;当render tree中元素的某些属性需要更新，而这些元素只影响外观、风格，不影响元素在网页中的位置（如：background-color、border-color、visibility等），浏览器就会重新构造样式，也就是&lt;strong&gt;重绘&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;重排&quot;&gt;&lt;a href=&quot;#重排&quot; class=&quot;headerlink&quot; title=&quot;重排&quot;&gt;&lt;/a&gt;重排&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;DOM 操作（元素添加，删除，修改，或者元素顺序的改变）&lt;/li&gt;
&lt;li&gt;内容变化，包括表单域内的文本改变&lt;/li&gt;
&lt;li&gt;CSS 属性的计算或改变&lt;/li&gt;
&lt;li&gt;添加或删除样式表&lt;/li&gt;
&lt;li&gt;更改“类”的属性&lt;/li&gt;
&lt;li&gt;浏览器窗口的操作（缩放，滚动）&lt;/li&gt;
&lt;li&gt;伪类激活（:hover）&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;浏览器渲染过程&quot;&gt;&lt;a href=&quot;#浏览器渲染过程&quot; class=&quot;headerlink&quot; title=&quot;浏览器渲染过程&quot;&gt;&lt;/a&gt;浏览器渲染过程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;获取 HTML、css、js文件&lt;/li&gt;
&lt;li&gt;将HTML代码形成&lt;strong&gt;D
    
    </summary>
    
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>my first new post</title>
    <link href="http://yoursite.com/2016/03/07/my-first-new-post/"/>
    <id>http://yoursite.com/2016/03/07/my-first-new-post/</id>
    <published>2016-03-07T12:00:04.000Z</published>
    <updated>2016-03-07T12:26:04.075Z</updated>
    
    <content type="html">&lt;p&gt;正文Test&lt;/p&gt;
&lt;h1 id=&quot;这里是一级标题&quot;&gt;&lt;a href=&quot;#这里是一级标题&quot; class=&quot;headerlink&quot; title=&quot;这里是一级标题&quot;&gt;&lt;/a&gt;这里是一级标题&lt;/h1&gt;&lt;h2 id=&quot;这里是二级标题&quot;&gt;&lt;a href=&quot;#这里是二级标题&quot; class=&quot;headerlink&quot; title=&quot;这里是二级标题&quot;&gt;&lt;/a&gt;这里是二级标题&lt;/h2&gt;&lt;p&gt;点击进入我的&lt;a href=&quot;https://github.com/huangza&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;这里是第二个二级标题&quot;&gt;&lt;a href=&quot;#这里是第二个二级标题&quot; class=&quot;headerlink&quot; title=&quot;这里是第二个二级标题&quot;&gt;&lt;/a&gt;这里是第二个二级标题&lt;/h2&gt;&lt;p&gt;点击进入&lt;a href=&quot;http://www.jianshu.com/p/q81RER&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown教程（献给写作者的 Markdown 新手指南）&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;正文Test&lt;/p&gt;
&lt;h1 id=&quot;这里是一级标题&quot;&gt;&lt;a href=&quot;#这里是一级标题&quot; class=&quot;headerlink&quot; title=&quot;这里是一级标题&quot;&gt;&lt;/a&gt;这里是一级标题&lt;/h1&gt;&lt;h2 id=&quot;这里是二级标题&quot;&gt;&lt;a href=&quot;#这里是二级标题&quot; cla
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="博客，文章" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%EF%BC%8C%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/03/07/hello-world/"/>
    <id>http://yoursite.com/2016/03/07/hello-world/</id>
    <published>2016-03-07T02:48:04.059Z</published>
    <updated>2016-03-07T02:48:04.061Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
